/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateVolumeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVolumeResponse{}

// CreateVolumeResponse struct for CreateVolumeResponse
type CreateVolumeResponse struct {
	// The ID of the storage volume.
	Id                   string `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _CreateVolumeResponse CreateVolumeResponse

// NewCreateVolumeResponse instantiates a new CreateVolumeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVolumeResponse(id string) *CreateVolumeResponse {
	this := CreateVolumeResponse{}
	this.Id = id
	return &this
}

// NewCreateVolumeResponseWithDefaults instantiates a new CreateVolumeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVolumeResponseWithDefaults() *CreateVolumeResponse {
	this := CreateVolumeResponse{}
	return &this
}

// GetId returns the Id field value
func (o *CreateVolumeResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateVolumeResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateVolumeResponse) SetId(v string) {
	o.Id = v
}

func (o CreateVolumeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVolumeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateVolumeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateVolumeResponse := _CreateVolumeResponse{}

	err = json.Unmarshal(data, &varCreateVolumeResponse)

	if err != nil {
		return err
	}

	*o = CreateVolumeResponse(varCreateVolumeResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateVolumeResponse struct {
	value *CreateVolumeResponse
	isSet bool
}

func (v NullableCreateVolumeResponse) Get() *CreateVolumeResponse {
	return v.value
}

func (v *NullableCreateVolumeResponse) Set(val *CreateVolumeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVolumeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVolumeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVolumeResponse(val *CreateVolumeResponse) *NullableCreateVolumeResponse {
	return &NullableCreateVolumeResponse{value: val, isSet: true}
}

func (v NullableCreateVolumeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVolumeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
