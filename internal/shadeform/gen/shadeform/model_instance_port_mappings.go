/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InstancePortMappings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstancePortMappings{}

// InstancePortMappings List of port mappings on an instance that a Cloud Provider might have automatically set up.
type InstancePortMappings struct {
	InternalPort         *int32 `json:"internal_port,omitempty"`
	ExternalPort         *int32 `json:"external_port,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstancePortMappings InstancePortMappings

// NewInstancePortMappings instantiates a new InstancePortMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstancePortMappings() *InstancePortMappings {
	this := InstancePortMappings{}
	return &this
}

// NewInstancePortMappingsWithDefaults instantiates a new InstancePortMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstancePortMappingsWithDefaults() *InstancePortMappings {
	this := InstancePortMappings{}
	return &this
}

// GetInternalPort returns the InternalPort field value if set, zero value otherwise.
func (o *InstancePortMappings) GetInternalPort() int32 {
	if o == nil || IsNil(o.InternalPort) {
		var ret int32
		return ret
	}
	return *o.InternalPort
}

// GetInternalPortOk returns a tuple with the InternalPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancePortMappings) GetInternalPortOk() (*int32, bool) {
	if o == nil || IsNil(o.InternalPort) {
		return nil, false
	}
	return o.InternalPort, true
}

// HasInternalPort returns a boolean if a field has been set.
func (o *InstancePortMappings) HasInternalPort() bool {
	if o != nil && !IsNil(o.InternalPort) {
		return true
	}

	return false
}

// SetInternalPort gets a reference to the given int32 and assigns it to the InternalPort field.
func (o *InstancePortMappings) SetInternalPort(v int32) {
	o.InternalPort = &v
}

// GetExternalPort returns the ExternalPort field value if set, zero value otherwise.
func (o *InstancePortMappings) GetExternalPort() int32 {
	if o == nil || IsNil(o.ExternalPort) {
		var ret int32
		return ret
	}
	return *o.ExternalPort
}

// GetExternalPortOk returns a tuple with the ExternalPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstancePortMappings) GetExternalPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ExternalPort) {
		return nil, false
	}
	return o.ExternalPort, true
}

// HasExternalPort returns a boolean if a field has been set.
func (o *InstancePortMappings) HasExternalPort() bool {
	if o != nil && !IsNil(o.ExternalPort) {
		return true
	}

	return false
}

// SetExternalPort gets a reference to the given int32 and assigns it to the ExternalPort field.
func (o *InstancePortMappings) SetExternalPort(v int32) {
	o.ExternalPort = &v
}

func (o InstancePortMappings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstancePortMappings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InternalPort) {
		toSerialize["internal_port"] = o.InternalPort
	}
	if !IsNil(o.ExternalPort) {
		toSerialize["external_port"] = o.ExternalPort
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstancePortMappings) UnmarshalJSON(data []byte) (err error) {
	varInstancePortMappings := _InstancePortMappings{}

	err = json.Unmarshal(data, &varInstancePortMappings)

	if err != nil {
		return err
	}

	*o = InstancePortMappings(varInstancePortMappings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "internal_port")
		delete(additionalProperties, "external_port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstancePortMappings struct {
	value *InstancePortMappings
	isSet bool
}

func (v NullableInstancePortMappings) Get() *InstancePortMappings {
	return v.value
}

func (v *NullableInstancePortMappings) Set(val *InstancePortMappings) {
	v.value = val
	v.isSet = true
}

func (v NullableInstancePortMappings) IsSet() bool {
	return v.isSet
}

func (v *NullableInstancePortMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstancePortMappings(val *InstancePortMappings) *NullableInstancePortMappings {
	return &NullableInstancePortMappings{value: val, isSet: true}
}

func (v NullableInstancePortMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstancePortMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
