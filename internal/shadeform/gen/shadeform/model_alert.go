/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Alert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Alert{}

// Alert Set a date or spend threshold to receive an email alert
type Alert struct {
	// RFC3339 date string
	DateThreshold *string `json:"date_threshold,omitempty"`
	// Valid decimal representation of a dollar amount
	SpendThreshold       *string `json:"spend_threshold,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Alert Alert

// NewAlert instantiates a new Alert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlert() *Alert {
	this := Alert{}
	return &this
}

// NewAlertWithDefaults instantiates a new Alert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertWithDefaults() *Alert {
	this := Alert{}
	return &this
}

// GetDateThreshold returns the DateThreshold field value if set, zero value otherwise.
func (o *Alert) GetDateThreshold() string {
	if o == nil || IsNil(o.DateThreshold) {
		var ret string
		return ret
	}
	return *o.DateThreshold
}

// GetDateThresholdOk returns a tuple with the DateThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetDateThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.DateThreshold) {
		return nil, false
	}
	return o.DateThreshold, true
}

// HasDateThreshold returns a boolean if a field has been set.
func (o *Alert) HasDateThreshold() bool {
	if o != nil && !IsNil(o.DateThreshold) {
		return true
	}

	return false
}

// SetDateThreshold gets a reference to the given string and assigns it to the DateThreshold field.
func (o *Alert) SetDateThreshold(v string) {
	o.DateThreshold = &v
}

// GetSpendThreshold returns the SpendThreshold field value if set, zero value otherwise.
func (o *Alert) GetSpendThreshold() string {
	if o == nil || IsNil(o.SpendThreshold) {
		var ret string
		return ret
	}
	return *o.SpendThreshold
}

// GetSpendThresholdOk returns a tuple with the SpendThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetSpendThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.SpendThreshold) {
		return nil, false
	}
	return o.SpendThreshold, true
}

// HasSpendThreshold returns a boolean if a field has been set.
func (o *Alert) HasSpendThreshold() bool {
	if o != nil && !IsNil(o.SpendThreshold) {
		return true
	}

	return false
}

// SetSpendThreshold gets a reference to the given string and assigns it to the SpendThreshold field.
func (o *Alert) SetSpendThreshold(v string) {
	o.SpendThreshold = &v
}

func (o Alert) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Alert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateThreshold) {
		toSerialize["date_threshold"] = o.DateThreshold
	}
	if !IsNil(o.SpendThreshold) {
		toSerialize["spend_threshold"] = o.SpendThreshold
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Alert) UnmarshalJSON(data []byte) (err error) {
	varAlert := _Alert{}

	err = json.Unmarshal(data, &varAlert)

	if err != nil {
		return err
	}

	*o = Alert(varAlert)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "date_threshold")
		delete(additionalProperties, "spend_threshold")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAlert struct {
	value *Alert
	isSet bool
}

func (v NullableAlert) Get() *Alert {
	return v.value
}

func (v *NullableAlert) Set(val *Alert) {
	v.value = val
	v.isSet = true
}

func (v NullableAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlert(val *Alert) *NullableAlert {
	return &NullableAlert{value: val, isSet: true}
}

func (v NullableAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
