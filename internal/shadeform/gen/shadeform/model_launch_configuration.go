/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the LaunchConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LaunchConfiguration{}

// LaunchConfiguration Defines automatic actions after the instance becomes active.
type LaunchConfiguration struct {
	// Specifies the type of launch configuration. See [Launch Configuration](/getting-started/concepts#launch-configuration) for more details.
	Type                 string               `json:"type"`
	DockerConfiguration  *DockerConfiguration `json:"docker_configuration,omitempty"`
	ScriptConfiguration  *ScriptConfiguration `json:"script_configuration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LaunchConfiguration LaunchConfiguration

// NewLaunchConfiguration instantiates a new LaunchConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLaunchConfiguration(type_ string) *LaunchConfiguration {
	this := LaunchConfiguration{}
	this.Type = type_
	return &this
}

// NewLaunchConfigurationWithDefaults instantiates a new LaunchConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLaunchConfigurationWithDefaults() *LaunchConfiguration {
	this := LaunchConfiguration{}
	return &this
}

// GetType returns the Type field value
func (o *LaunchConfiguration) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LaunchConfiguration) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LaunchConfiguration) SetType(v string) {
	o.Type = v
}

// GetDockerConfiguration returns the DockerConfiguration field value if set, zero value otherwise.
func (o *LaunchConfiguration) GetDockerConfiguration() DockerConfiguration {
	if o == nil || IsNil(o.DockerConfiguration) {
		var ret DockerConfiguration
		return ret
	}
	return *o.DockerConfiguration
}

// GetDockerConfigurationOk returns a tuple with the DockerConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchConfiguration) GetDockerConfigurationOk() (*DockerConfiguration, bool) {
	if o == nil || IsNil(o.DockerConfiguration) {
		return nil, false
	}
	return o.DockerConfiguration, true
}

// HasDockerConfiguration returns a boolean if a field has been set.
func (o *LaunchConfiguration) HasDockerConfiguration() bool {
	if o != nil && !IsNil(o.DockerConfiguration) {
		return true
	}

	return false
}

// SetDockerConfiguration gets a reference to the given DockerConfiguration and assigns it to the DockerConfiguration field.
func (o *LaunchConfiguration) SetDockerConfiguration(v DockerConfiguration) {
	o.DockerConfiguration = &v
}

// GetScriptConfiguration returns the ScriptConfiguration field value if set, zero value otherwise.
func (o *LaunchConfiguration) GetScriptConfiguration() ScriptConfiguration {
	if o == nil || IsNil(o.ScriptConfiguration) {
		var ret ScriptConfiguration
		return ret
	}
	return *o.ScriptConfiguration
}

// GetScriptConfigurationOk returns a tuple with the ScriptConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LaunchConfiguration) GetScriptConfigurationOk() (*ScriptConfiguration, bool) {
	if o == nil || IsNil(o.ScriptConfiguration) {
		return nil, false
	}
	return o.ScriptConfiguration, true
}

// HasScriptConfiguration returns a boolean if a field has been set.
func (o *LaunchConfiguration) HasScriptConfiguration() bool {
	if o != nil && !IsNil(o.ScriptConfiguration) {
		return true
	}

	return false
}

// SetScriptConfiguration gets a reference to the given ScriptConfiguration and assigns it to the ScriptConfiguration field.
func (o *LaunchConfiguration) SetScriptConfiguration(v ScriptConfiguration) {
	o.ScriptConfiguration = &v
}

func (o LaunchConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LaunchConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.DockerConfiguration) {
		toSerialize["docker_configuration"] = o.DockerConfiguration
	}
	if !IsNil(o.ScriptConfiguration) {
		toSerialize["script_configuration"] = o.ScriptConfiguration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LaunchConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLaunchConfiguration := _LaunchConfiguration{}

	err = json.Unmarshal(data, &varLaunchConfiguration)

	if err != nil {
		return err
	}

	*o = LaunchConfiguration(varLaunchConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "docker_configuration")
		delete(additionalProperties, "script_configuration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLaunchConfiguration struct {
	value *LaunchConfiguration
	isSet bool
}

func (v NullableLaunchConfiguration) Get() *LaunchConfiguration {
	return v.value
}

func (v *NullableLaunchConfiguration) Set(val *LaunchConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableLaunchConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableLaunchConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLaunchConfiguration(val *LaunchConfiguration) *NullableLaunchConfiguration {
	return &NullableLaunchConfiguration{value: val, isSet: true}
}

func (v NullableLaunchConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLaunchConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
