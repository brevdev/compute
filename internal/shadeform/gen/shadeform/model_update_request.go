/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRequest{}

// UpdateRequest struct for UpdateRequest
type UpdateRequest struct {
	// The name of the instance
	Name       *string     `json:"name,omitempty"`
	AutoDelete *AutoDelete `json:"auto_delete,omitempty"`
	Alert      *Alert      `json:"alert,omitempty"`
	// Add custom, searchable tags to instances.
	Tags                 []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateRequest UpdateRequest

// NewUpdateRequest instantiates a new UpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRequest() *UpdateRequest {
	this := UpdateRequest{}
	return &this
}

// NewUpdateRequestWithDefaults instantiates a new UpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRequestWithDefaults() *UpdateRequest {
	this := UpdateRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateRequest) SetName(v string) {
	o.Name = &v
}

// GetAutoDelete returns the AutoDelete field value if set, zero value otherwise.
func (o *UpdateRequest) GetAutoDelete() AutoDelete {
	if o == nil || IsNil(o.AutoDelete) {
		var ret AutoDelete
		return ret
	}
	return *o.AutoDelete
}

// GetAutoDeleteOk returns a tuple with the AutoDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetAutoDeleteOk() (*AutoDelete, bool) {
	if o == nil || IsNil(o.AutoDelete) {
		return nil, false
	}
	return o.AutoDelete, true
}

// HasAutoDelete returns a boolean if a field has been set.
func (o *UpdateRequest) HasAutoDelete() bool {
	if o != nil && !IsNil(o.AutoDelete) {
		return true
	}

	return false
}

// SetAutoDelete gets a reference to the given AutoDelete and assigns it to the AutoDelete field.
func (o *UpdateRequest) SetAutoDelete(v AutoDelete) {
	o.AutoDelete = &v
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *UpdateRequest) GetAlert() Alert {
	if o == nil || IsNil(o.Alert) {
		var ret Alert
		return ret
	}
	return *o.Alert
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetAlertOk() (*Alert, bool) {
	if o == nil || IsNil(o.Alert) {
		return nil, false
	}
	return o.Alert, true
}

// HasAlert returns a boolean if a field has been set.
func (o *UpdateRequest) HasAlert() bool {
	if o != nil && !IsNil(o.Alert) {
		return true
	}

	return false
}

// SetAlert gets a reference to the given Alert and assigns it to the Alert field.
func (o *UpdateRequest) SetAlert(v Alert) {
	o.Alert = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateRequest) SetTags(v []string) {
	o.Tags = v
}

func (o UpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AutoDelete) {
		toSerialize["auto_delete"] = o.AutoDelete
	}
	if !IsNil(o.Alert) {
		toSerialize["alert"] = o.Alert
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateRequest := _UpdateRequest{}

	err = json.Unmarshal(data, &varUpdateRequest)

	if err != nil {
		return err
	}

	*o = UpdateRequest(varUpdateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "auto_delete")
		delete(additionalProperties, "alert")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateRequest struct {
	value *UpdateRequest
	isSet bool
}

func (v NullableUpdateRequest) Get() *UpdateRequest {
	return v.value
}

func (v *NullableUpdateRequest) Set(val *UpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRequest(val *UpdateRequest) *NullableUpdateRequest {
	return &NullableUpdateRequest{value: val, isSet: true}
}

func (v NullableUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
