/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ScriptConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScriptConfiguration{}

// ScriptConfiguration May only be used if launch_configuration.type is 'script'. Configures a startup script to be run automatically after the instance is active. See this [tutorial]/guides/startupscript) for examples.
type ScriptConfiguration struct {
	// A startup script that is base64 encoded.
	Base64Script         string `json:"base64_script"`
	AdditionalProperties map[string]interface{}
}

type _ScriptConfiguration ScriptConfiguration

// NewScriptConfiguration instantiates a new ScriptConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptConfiguration(base64Script string) *ScriptConfiguration {
	this := ScriptConfiguration{}
	this.Base64Script = base64Script
	return &this
}

// NewScriptConfigurationWithDefaults instantiates a new ScriptConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptConfigurationWithDefaults() *ScriptConfiguration {
	this := ScriptConfiguration{}
	return &this
}

// GetBase64Script returns the Base64Script field value
func (o *ScriptConfiguration) GetBase64Script() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Base64Script
}

// GetBase64ScriptOk returns a tuple with the Base64Script field value
// and a boolean to check if the value has been set.
func (o *ScriptConfiguration) GetBase64ScriptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Base64Script, true
}

// SetBase64Script sets field value
func (o *ScriptConfiguration) SetBase64Script(v string) {
	o.Base64Script = v
}

func (o ScriptConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScriptConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["base64_script"] = o.Base64Script

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScriptConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"base64_script",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScriptConfiguration := _ScriptConfiguration{}

	err = json.Unmarshal(data, &varScriptConfiguration)

	if err != nil {
		return err
	}

	*o = ScriptConfiguration(varScriptConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "base64_script")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScriptConfiguration struct {
	value *ScriptConfiguration
	isSet bool
}

func (v NullableScriptConfiguration) Get() *ScriptConfiguration {
	return v.value
}

func (v *NullableScriptConfiguration) Set(val *ScriptConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptConfiguration(val *ScriptConfiguration) *NullableScriptConfiguration {
	return &NullableScriptConfiguration{value: val, isSet: true}
}

func (v NullableScriptConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
