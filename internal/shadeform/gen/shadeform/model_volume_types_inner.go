/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the VolumeTypesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeTypesInner{}

// VolumeTypesInner struct for VolumeTypesInner
type VolumeTypesInner struct {
	Cloud Cloud `json:"cloud"`
	// Specifies the region.
	Region string `json:"region"`
	// Denotes whether the volume supports multiple instances mounting to it at the same time.
	SupportsMultiMount bool `json:"supports_multi_mount"`
	// Denotes whether the volume is fixed in size or elastically scaling.
	FixedSize bool `json:"fixed_size"`
	// Price of the specified volume type per GB per hour
	PricePerGbPerHour    string `json:"price_per_gb_per_hour"`
	AdditionalProperties map[string]interface{}
}

type _VolumeTypesInner VolumeTypesInner

// NewVolumeTypesInner instantiates a new VolumeTypesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeTypesInner(cloud Cloud, region string, supportsMultiMount bool, fixedSize bool, pricePerGbPerHour string) *VolumeTypesInner {
	this := VolumeTypesInner{}
	this.Cloud = cloud
	this.Region = region
	this.SupportsMultiMount = supportsMultiMount
	this.FixedSize = fixedSize
	this.PricePerGbPerHour = pricePerGbPerHour
	return &this
}

// NewVolumeTypesInnerWithDefaults instantiates a new VolumeTypesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeTypesInnerWithDefaults() *VolumeTypesInner {
	this := VolumeTypesInner{}
	return &this
}

// GetCloud returns the Cloud field value
func (o *VolumeTypesInner) GetCloud() Cloud {
	if o == nil {
		var ret Cloud
		return ret
	}

	return o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value
// and a boolean to check if the value has been set.
func (o *VolumeTypesInner) GetCloudOk() (*Cloud, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cloud, true
}

// SetCloud sets field value
func (o *VolumeTypesInner) SetCloud(v Cloud) {
	o.Cloud = v
}

// GetRegion returns the Region field value
func (o *VolumeTypesInner) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *VolumeTypesInner) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *VolumeTypesInner) SetRegion(v string) {
	o.Region = v
}

// GetSupportsMultiMount returns the SupportsMultiMount field value
func (o *VolumeTypesInner) GetSupportsMultiMount() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportsMultiMount
}

// GetSupportsMultiMountOk returns a tuple with the SupportsMultiMount field value
// and a boolean to check if the value has been set.
func (o *VolumeTypesInner) GetSupportsMultiMountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportsMultiMount, true
}

// SetSupportsMultiMount sets field value
func (o *VolumeTypesInner) SetSupportsMultiMount(v bool) {
	o.SupportsMultiMount = v
}

// GetFixedSize returns the FixedSize field value
func (o *VolumeTypesInner) GetFixedSize() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FixedSize
}

// GetFixedSizeOk returns a tuple with the FixedSize field value
// and a boolean to check if the value has been set.
func (o *VolumeTypesInner) GetFixedSizeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FixedSize, true
}

// SetFixedSize sets field value
func (o *VolumeTypesInner) SetFixedSize(v bool) {
	o.FixedSize = v
}

// GetPricePerGbPerHour returns the PricePerGbPerHour field value
func (o *VolumeTypesInner) GetPricePerGbPerHour() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PricePerGbPerHour
}

// GetPricePerGbPerHourOk returns a tuple with the PricePerGbPerHour field value
// and a boolean to check if the value has been set.
func (o *VolumeTypesInner) GetPricePerGbPerHourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PricePerGbPerHour, true
}

// SetPricePerGbPerHour sets field value
func (o *VolumeTypesInner) SetPricePerGbPerHour(v string) {
	o.PricePerGbPerHour = v
}

func (o VolumeTypesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeTypesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloud"] = o.Cloud
	toSerialize["region"] = o.Region
	toSerialize["supports_multi_mount"] = o.SupportsMultiMount
	toSerialize["fixed_size"] = o.FixedSize
	toSerialize["price_per_gb_per_hour"] = o.PricePerGbPerHour

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VolumeTypesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloud",
		"region",
		"supports_multi_mount",
		"fixed_size",
		"price_per_gb_per_hour",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeTypesInner := _VolumeTypesInner{}

	err = json.Unmarshal(data, &varVolumeTypesInner)

	if err != nil {
		return err
	}

	*o = VolumeTypesInner(varVolumeTypesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cloud")
		delete(additionalProperties, "region")
		delete(additionalProperties, "supports_multi_mount")
		delete(additionalProperties, "fixed_size")
		delete(additionalProperties, "price_per_gb_per_hour")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVolumeTypesInner struct {
	value *VolumeTypesInner
	isSet bool
}

func (v NullableVolumeTypesInner) Get() *VolumeTypesInner {
	return v.value
}

func (v *NullableVolumeTypesInner) Set(val *VolumeTypesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeTypesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeTypesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeTypesInner(val *VolumeTypesInner) *NullableVolumeTypesInner {
	return &NullableVolumeTypesInner{value: val, isSet: true}
}

func (v NullableVolumeTypesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeTypesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
