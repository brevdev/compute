/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UfwRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UfwRule{}

// UfwRule Uncomplicated Firewall rule configuration
type UfwRule struct {
	// The UFW rule action
	Rule *string `json:"rule,omitempty"`
	// Source IP address or CIDR range
	FromIp NullableString `json:"from_ip,omitempty"`
	// Destination IP address or CIDR range
	ToIp NullableString `json:"to_ip,omitempty"`
	// Port number or range (e.g. '80' or '8000:8999')
	Port NullableString `json:"port,omitempty"`
	// Protocol (e.g. tcp, udp)
	Proto                NullableString `json:"proto,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UfwRule UfwRule

// NewUfwRule instantiates a new UfwRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUfwRule() *UfwRule {
	this := UfwRule{}
	return &this
}

// NewUfwRuleWithDefaults instantiates a new UfwRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUfwRuleWithDefaults() *UfwRule {
	this := UfwRule{}
	return &this
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *UfwRule) GetRule() string {
	if o == nil || IsNil(o.Rule) {
		var ret string
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UfwRule) GetRuleOk() (*string, bool) {
	if o == nil || IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *UfwRule) HasRule() bool {
	if o != nil && !IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given string and assigns it to the Rule field.
func (o *UfwRule) SetRule(v string) {
	o.Rule = &v
}

// GetFromIp returns the FromIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UfwRule) GetFromIp() string {
	if o == nil || IsNil(o.FromIp.Get()) {
		var ret string
		return ret
	}
	return *o.FromIp.Get()
}

// GetFromIpOk returns a tuple with the FromIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UfwRule) GetFromIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromIp.Get(), o.FromIp.IsSet()
}

// HasFromIp returns a boolean if a field has been set.
func (o *UfwRule) HasFromIp() bool {
	if o != nil && o.FromIp.IsSet() {
		return true
	}

	return false
}

// SetFromIp gets a reference to the given NullableString and assigns it to the FromIp field.
func (o *UfwRule) SetFromIp(v string) {
	o.FromIp.Set(&v)
}

// SetFromIpNil sets the value for FromIp to be an explicit nil
func (o *UfwRule) SetFromIpNil() {
	o.FromIp.Set(nil)
}

// UnsetFromIp ensures that no value is present for FromIp, not even an explicit nil
func (o *UfwRule) UnsetFromIp() {
	o.FromIp.Unset()
}

// GetToIp returns the ToIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UfwRule) GetToIp() string {
	if o == nil || IsNil(o.ToIp.Get()) {
		var ret string
		return ret
	}
	return *o.ToIp.Get()
}

// GetToIpOk returns a tuple with the ToIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UfwRule) GetToIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToIp.Get(), o.ToIp.IsSet()
}

// HasToIp returns a boolean if a field has been set.
func (o *UfwRule) HasToIp() bool {
	if o != nil && o.ToIp.IsSet() {
		return true
	}

	return false
}

// SetToIp gets a reference to the given NullableString and assigns it to the ToIp field.
func (o *UfwRule) SetToIp(v string) {
	o.ToIp.Set(&v)
}

// SetToIpNil sets the value for ToIp to be an explicit nil
func (o *UfwRule) SetToIpNil() {
	o.ToIp.Set(nil)
}

// UnsetToIp ensures that no value is present for ToIp, not even an explicit nil
func (o *UfwRule) UnsetToIp() {
	o.ToIp.Unset()
}

// GetPort returns the Port field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UfwRule) GetPort() string {
	if o == nil || IsNil(o.Port.Get()) {
		var ret string
		return ret
	}
	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UfwRule) GetPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// HasPort returns a boolean if a field has been set.
func (o *UfwRule) HasPort() bool {
	if o != nil && o.Port.IsSet() {
		return true
	}

	return false
}

// SetPort gets a reference to the given NullableString and assigns it to the Port field.
func (o *UfwRule) SetPort(v string) {
	o.Port.Set(&v)
}

// SetPortNil sets the value for Port to be an explicit nil
func (o *UfwRule) SetPortNil() {
	o.Port.Set(nil)
}

// UnsetPort ensures that no value is present for Port, not even an explicit nil
func (o *UfwRule) UnsetPort() {
	o.Port.Unset()
}

// GetProto returns the Proto field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UfwRule) GetProto() string {
	if o == nil || IsNil(o.Proto.Get()) {
		var ret string
		return ret
	}
	return *o.Proto.Get()
}

// GetProtoOk returns a tuple with the Proto field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UfwRule) GetProtoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Proto.Get(), o.Proto.IsSet()
}

// HasProto returns a boolean if a field has been set.
func (o *UfwRule) HasProto() bool {
	if o != nil && o.Proto.IsSet() {
		return true
	}

	return false
}

// SetProto gets a reference to the given NullableString and assigns it to the Proto field.
func (o *UfwRule) SetProto(v string) {
	o.Proto.Set(&v)
}

// SetProtoNil sets the value for Proto to be an explicit nil
func (o *UfwRule) SetProtoNil() {
	o.Proto.Set(nil)
}

// UnsetProto ensures that no value is present for Proto, not even an explicit nil
func (o *UfwRule) UnsetProto() {
	o.Proto.Unset()
}

func (o UfwRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UfwRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rule) {
		toSerialize["rule"] = o.Rule
	}
	if o.FromIp.IsSet() {
		toSerialize["from_ip"] = o.FromIp.Get()
	}
	if o.ToIp.IsSet() {
		toSerialize["to_ip"] = o.ToIp.Get()
	}
	if o.Port.IsSet() {
		toSerialize["port"] = o.Port.Get()
	}
	if o.Proto.IsSet() {
		toSerialize["proto"] = o.Proto.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UfwRule) UnmarshalJSON(data []byte) (err error) {
	varUfwRule := _UfwRule{}

	err = json.Unmarshal(data, &varUfwRule)

	if err != nil {
		return err
	}

	*o = UfwRule(varUfwRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rule")
		delete(additionalProperties, "from_ip")
		delete(additionalProperties, "to_ip")
		delete(additionalProperties, "port")
		delete(additionalProperties, "proto")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUfwRule struct {
	value *UfwRule
	isSet bool
}

func (v NullableUfwRule) Get() *UfwRule {
	return v.value
}

func (v *NullableUfwRule) Set(val *UfwRule) {
	v.value = val
	v.isSet = true
}

func (v NullableUfwRule) IsSet() bool {
	return v.isSet
}

func (v *NullableUfwRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUfwRule(val *UfwRule) *NullableUfwRule {
	return &NullableUfwRule{value: val, isSet: true}
}

func (v NullableUfwRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUfwRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
