/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Cloud Specifies the underlying cloud provider. See this [explanation](/getting-started/concepts#cloud-cloud-provider) for more details.
type Cloud string

// List of Cloud
const (
	LAMBDALABS    Cloud = "lambdalabs"
	PAPERSPACE    Cloud = "paperspace"
	VULTR         Cloud = "vultr"
	DATACRUNCH    Cloud = "datacrunch"
	LATITUDE      Cloud = "latitude"
	MASSEDCOMPUTE Cloud = "massedcompute"
	IMWT          Cloud = "imwt"
	HYPERSTACK    Cloud = "hyperstack"
	NEBIUS        Cloud = "nebius"
	CRUSOE        Cloud = "crusoe"
	DENVR         Cloud = "denvr"
	DIGITALOCEAN  Cloud = "digitalocean"
	TCM           Cloud = "tcm"
	HOTAISLE      Cloud = "hotaisle"
	CUDO          Cloud = "cudo"
	SCALEWAY      Cloud = "scaleway"
	EVERGREEN     Cloud = "evergreen"
	EXCESSSUPPLY  Cloud = "excesssupply"
	VOLTAGEPARK   Cloud = "voltagepark"
	BOOSTRUN      Cloud = "boostrun"
	IONSTREAM     Cloud = "ionstream"
	WHITEFIBER    Cloud = "whitefiber"
	HORIZON       Cloud = "horizon"
	FPT           Cloud = "fpt"
	HYDRA         Cloud = "hydra"
	AMAYA         Cloud = "amaya"
)

// All allowed values of Cloud enum
var AllowedCloudEnumValues = []Cloud{
	"lambdalabs",
	"paperspace",
	"vultr",
	"datacrunch",
	"latitude",
	"massedcompute",
	"imwt",
	"hyperstack",
	"nebius",
	"crusoe",
	"denvr",
	"digitalocean",
	"tcm",
	"hotaisle",
	"cudo",
	"scaleway",
	"evergreen",
	"excesssupply",
	"voltagepark",
	"boostrun",
	"ionstream",
	"whitefiber",
	"horizon",
	"fpt",
	"hydra",
	"amaya",
}

func (v *Cloud) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Cloud(value)
	for _, existing := range AllowedCloudEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Cloud", value)
}

// NewCloudFromValue returns a pointer to a valid Cloud
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudFromValue(v string) (*Cloud, error) {
	ev := Cloud(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Cloud: valid values are %v", v, AllowedCloudEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Cloud) IsValid() bool {
	for _, existing := range AllowedCloudEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Cloud value
func (v Cloud) Ptr() *Cloud {
	return &v
}

type NullableCloud struct {
	value *Cloud
	isSet bool
}

func (v NullableCloud) Get() *Cloud {
	return v.value
}

func (v *NullableCloud) Set(val *Cloud) {
	v.value = val
	v.isSet = true
}

func (v NullableCloud) IsSet() bool {
	return v.isSet
}

func (v *NullableCloud) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloud(val *Cloud) *NullableCloud {
	return &NullableCloud{value: val, isSet: true}
}

func (v NullableCloud) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloud) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
