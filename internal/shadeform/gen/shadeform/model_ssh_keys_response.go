/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SshKeysResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SshKeysResponse{}

// SshKeysResponse struct for SshKeysResponse
type SshKeysResponse struct {
	SshKeys              []SshKey `json:"ssh_keys"`
	AdditionalProperties map[string]interface{}
}

type _SshKeysResponse SshKeysResponse

// NewSshKeysResponse instantiates a new SshKeysResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshKeysResponse(sshKeys []SshKey) *SshKeysResponse {
	this := SshKeysResponse{}
	this.SshKeys = sshKeys
	return &this
}

// NewSshKeysResponseWithDefaults instantiates a new SshKeysResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshKeysResponseWithDefaults() *SshKeysResponse {
	this := SshKeysResponse{}
	return &this
}

// GetSshKeys returns the SshKeys field value
func (o *SshKeysResponse) GetSshKeys() []SshKey {
	if o == nil {
		var ret []SshKey
		return ret
	}

	return o.SshKeys
}

// GetSshKeysOk returns a tuple with the SshKeys field value
// and a boolean to check if the value has been set.
func (o *SshKeysResponse) GetSshKeysOk() ([]SshKey, bool) {
	if o == nil {
		return nil, false
	}
	return o.SshKeys, true
}

// SetSshKeys sets field value
func (o *SshKeysResponse) SetSshKeys(v []SshKey) {
	o.SshKeys = v
}

func (o SshKeysResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SshKeysResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ssh_keys"] = o.SshKeys

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SshKeysResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ssh_keys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSshKeysResponse := _SshKeysResponse{}

	err = json.Unmarshal(data, &varSshKeysResponse)

	if err != nil {
		return err
	}

	*o = SshKeysResponse(varSshKeysResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ssh_keys")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSshKeysResponse struct {
	value *SshKeysResponse
	isSet bool
}

func (v NullableSshKeysResponse) Get() *SshKeysResponse {
	return v.value
}

func (v *NullableSshKeysResponse) Set(val *SshKeysResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSshKeysResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSshKeysResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshKeysResponse(val *SshKeysResponse) *NullableSshKeysResponse {
	return &NullableSshKeysResponse{value: val, isSet: true}
}

func (v NullableSshKeysResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshKeysResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
