/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateVolumeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVolumeRequest{}

// CreateVolumeRequest struct for CreateVolumeRequest
type CreateVolumeRequest struct {
	Cloud Cloud `json:"cloud"`
	// Specifies the region.
	Region string `json:"region"`
	// Storage volume size in GB
	SizeInGb int32 `json:"size_in_gb"`
	// The name of the storage volume.
	Name                 string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _CreateVolumeRequest CreateVolumeRequest

// NewCreateVolumeRequest instantiates a new CreateVolumeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVolumeRequest(cloud Cloud, region string, sizeInGb int32, name string) *CreateVolumeRequest {
	this := CreateVolumeRequest{}
	this.Cloud = cloud
	this.Region = region
	this.SizeInGb = sizeInGb
	this.Name = name
	return &this
}

// NewCreateVolumeRequestWithDefaults instantiates a new CreateVolumeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVolumeRequestWithDefaults() *CreateVolumeRequest {
	this := CreateVolumeRequest{}
	return &this
}

// GetCloud returns the Cloud field value
func (o *CreateVolumeRequest) GetCloud() Cloud {
	if o == nil {
		var ret Cloud
		return ret
	}

	return o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value
// and a boolean to check if the value has been set.
func (o *CreateVolumeRequest) GetCloudOk() (*Cloud, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cloud, true
}

// SetCloud sets field value
func (o *CreateVolumeRequest) SetCloud(v Cloud) {
	o.Cloud = v
}

// GetRegion returns the Region field value
func (o *CreateVolumeRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CreateVolumeRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CreateVolumeRequest) SetRegion(v string) {
	o.Region = v
}

// GetSizeInGb returns the SizeInGb field value
func (o *CreateVolumeRequest) GetSizeInGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SizeInGb
}

// GetSizeInGbOk returns a tuple with the SizeInGb field value
// and a boolean to check if the value has been set.
func (o *CreateVolumeRequest) GetSizeInGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeInGb, true
}

// SetSizeInGb sets field value
func (o *CreateVolumeRequest) SetSizeInGb(v int32) {
	o.SizeInGb = v
}

// GetName returns the Name field value
func (o *CreateVolumeRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateVolumeRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateVolumeRequest) SetName(v string) {
	o.Name = v
}

func (o CreateVolumeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVolumeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloud"] = o.Cloud
	toSerialize["region"] = o.Region
	toSerialize["size_in_gb"] = o.SizeInGb
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateVolumeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloud",
		"region",
		"size_in_gb",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateVolumeRequest := _CreateVolumeRequest{}

	err = json.Unmarshal(data, &varCreateVolumeRequest)

	if err != nil {
		return err
	}

	*o = CreateVolumeRequest(varCreateVolumeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cloud")
		delete(additionalProperties, "region")
		delete(additionalProperties, "size_in_gb")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateVolumeRequest struct {
	value *CreateVolumeRequest
	isSet bool
}

func (v NullableCreateVolumeRequest) Get() *CreateVolumeRequest {
	return v.value
}

func (v *NullableCreateVolumeRequest) Set(val *CreateVolumeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVolumeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVolumeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVolumeRequest(val *CreateVolumeRequest) *NullableCreateVolumeRequest {
	return &NullableCreateVolumeRequest{value: val, isSet: true}
}

func (v NullableCreateVolumeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVolumeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
