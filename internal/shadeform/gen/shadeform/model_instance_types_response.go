/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceTypesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceTypesResponse{}

// InstanceTypesResponse Response of /instances/types
type InstanceTypesResponse struct {
	InstanceTypes        []InstanceType `json:"instance_types"`
	AdditionalProperties map[string]interface{}
}

type _InstanceTypesResponse InstanceTypesResponse

// NewInstanceTypesResponse instantiates a new InstanceTypesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypesResponse(instanceTypes []InstanceType) *InstanceTypesResponse {
	this := InstanceTypesResponse{}
	this.InstanceTypes = instanceTypes
	return &this
}

// NewInstanceTypesResponseWithDefaults instantiates a new InstanceTypesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypesResponseWithDefaults() *InstanceTypesResponse {
	this := InstanceTypesResponse{}
	return &this
}

// GetInstanceTypes returns the InstanceTypes field value
func (o *InstanceTypesResponse) GetInstanceTypes() []InstanceType {
	if o == nil {
		var ret []InstanceType
		return ret
	}

	return o.InstanceTypes
}

// GetInstanceTypesOk returns a tuple with the InstanceTypes field value
// and a boolean to check if the value has been set.
func (o *InstanceTypesResponse) GetInstanceTypesOk() ([]InstanceType, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstanceTypes, true
}

// SetInstanceTypes sets field value
func (o *InstanceTypesResponse) SetInstanceTypes(v []InstanceType) {
	o.InstanceTypes = v
}

func (o InstanceTypesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceTypesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instance_types"] = o.InstanceTypes

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceTypesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instance_types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceTypesResponse := _InstanceTypesResponse{}

	err = json.Unmarshal(data, &varInstanceTypesResponse)

	if err != nil {
		return err
	}

	*o = InstanceTypesResponse(varInstanceTypesResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instance_types")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceTypesResponse struct {
	value *InstanceTypesResponse
	isSet bool
}

func (v NullableInstanceTypesResponse) Get() *InstanceTypesResponse {
	return v.value
}

func (v *NullableInstanceTypesResponse) Set(val *InstanceTypesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypesResponse(val *InstanceTypesResponse) *NullableInstanceTypesResponse {
	return &NullableInstanceTypesResponse{value: val, isSet: true}
}

func (v NullableInstanceTypesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
