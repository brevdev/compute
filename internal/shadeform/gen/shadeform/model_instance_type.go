/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceType{}

// InstanceType Information about a specific instance type
type InstanceType struct {
	Cloud Cloud `json:"cloud"`
	// The Shadeform standardized instance type. See this [explanation](/getting-started/concepts#shade-instance-type-and-cloud-instance-type) for more details.
	ShadeInstanceType string `json:"shade_instance_type"`
	// The instance type for the underlying cloud provider. See this [explanation](/getting-started/concepts#shade-instance-type-and-cloud-instance-type) for more details.
	CloudInstanceType string                    `json:"cloud_instance_type"`
	Configuration     InstanceTypeConfiguration `json:"configuration"`
	// The hourly price of the instance in cents.
	HourlyPrice int32 `json:"hourly_price"`
	// Whether the instance is a \"vm\" (virtual machine), a \"container\" (docker container), or \"baremetal\" (bare metal server).
	DeploymentType       string         `json:"deployment_type"`
	Availability         []Availability `json:"availability"`
	BootTime             *BootTime      `json:"boot_time,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceType InstanceType

// NewInstanceType instantiates a new InstanceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceType(cloud Cloud, shadeInstanceType string, cloudInstanceType string, configuration InstanceTypeConfiguration, hourlyPrice int32, deploymentType string, availability []Availability) *InstanceType {
	this := InstanceType{}
	this.Cloud = cloud
	this.ShadeInstanceType = shadeInstanceType
	this.CloudInstanceType = cloudInstanceType
	this.Configuration = configuration
	this.HourlyPrice = hourlyPrice
	this.DeploymentType = deploymentType
	this.Availability = availability
	return &this
}

// NewInstanceTypeWithDefaults instantiates a new InstanceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeWithDefaults() *InstanceType {
	this := InstanceType{}
	return &this
}

// GetCloud returns the Cloud field value
func (o *InstanceType) GetCloud() Cloud {
	if o == nil {
		var ret Cloud
		return ret
	}

	return o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetCloudOk() (*Cloud, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cloud, true
}

// SetCloud sets field value
func (o *InstanceType) SetCloud(v Cloud) {
	o.Cloud = v
}

// GetShadeInstanceType returns the ShadeInstanceType field value
func (o *InstanceType) GetShadeInstanceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShadeInstanceType
}

// GetShadeInstanceTypeOk returns a tuple with the ShadeInstanceType field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetShadeInstanceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShadeInstanceType, true
}

// SetShadeInstanceType sets field value
func (o *InstanceType) SetShadeInstanceType(v string) {
	o.ShadeInstanceType = v
}

// GetCloudInstanceType returns the CloudInstanceType field value
func (o *InstanceType) GetCloudInstanceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudInstanceType
}

// GetCloudInstanceTypeOk returns a tuple with the CloudInstanceType field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetCloudInstanceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudInstanceType, true
}

// SetCloudInstanceType sets field value
func (o *InstanceType) SetCloudInstanceType(v string) {
	o.CloudInstanceType = v
}

// GetConfiguration returns the Configuration field value
func (o *InstanceType) GetConfiguration() InstanceTypeConfiguration {
	if o == nil {
		var ret InstanceTypeConfiguration
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetConfigurationOk() (*InstanceTypeConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configuration, true
}

// SetConfiguration sets field value
func (o *InstanceType) SetConfiguration(v InstanceTypeConfiguration) {
	o.Configuration = v
}

// GetHourlyPrice returns the HourlyPrice field value
func (o *InstanceType) GetHourlyPrice() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HourlyPrice
}

// GetHourlyPriceOk returns a tuple with the HourlyPrice field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetHourlyPriceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HourlyPrice, true
}

// SetHourlyPrice sets field value
func (o *InstanceType) SetHourlyPrice(v int32) {
	o.HourlyPrice = v
}

// GetDeploymentType returns the DeploymentType field value
func (o *InstanceType) GetDeploymentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploymentType
}

// GetDeploymentTypeOk returns a tuple with the DeploymentType field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetDeploymentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentType, true
}

// SetDeploymentType sets field value
func (o *InstanceType) SetDeploymentType(v string) {
	o.DeploymentType = v
}

// GetAvailability returns the Availability field value
func (o *InstanceType) GetAvailability() []Availability {
	if o == nil {
		var ret []Availability
		return ret
	}

	return o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value
// and a boolean to check if the value has been set.
func (o *InstanceType) GetAvailabilityOk() ([]Availability, bool) {
	if o == nil {
		return nil, false
	}
	return o.Availability, true
}

// SetAvailability sets field value
func (o *InstanceType) SetAvailability(v []Availability) {
	o.Availability = v
}

// GetBootTime returns the BootTime field value if set, zero value otherwise.
func (o *InstanceType) GetBootTime() BootTime {
	if o == nil || IsNil(o.BootTime) {
		var ret BootTime
		return ret
	}
	return *o.BootTime
}

// GetBootTimeOk returns a tuple with the BootTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceType) GetBootTimeOk() (*BootTime, bool) {
	if o == nil || IsNil(o.BootTime) {
		return nil, false
	}
	return o.BootTime, true
}

// HasBootTime returns a boolean if a field has been set.
func (o *InstanceType) HasBootTime() bool {
	if o != nil && !IsNil(o.BootTime) {
		return true
	}

	return false
}

// SetBootTime gets a reference to the given BootTime and assigns it to the BootTime field.
func (o *InstanceType) SetBootTime(v BootTime) {
	o.BootTime = &v
}

func (o InstanceType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloud"] = o.Cloud
	toSerialize["shade_instance_type"] = o.ShadeInstanceType
	toSerialize["cloud_instance_type"] = o.CloudInstanceType
	toSerialize["configuration"] = o.Configuration
	toSerialize["hourly_price"] = o.HourlyPrice
	toSerialize["deployment_type"] = o.DeploymentType
	toSerialize["availability"] = o.Availability
	if !IsNil(o.BootTime) {
		toSerialize["boot_time"] = o.BootTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloud",
		"shade_instance_type",
		"cloud_instance_type",
		"configuration",
		"hourly_price",
		"deployment_type",
		"availability",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceType := _InstanceType{}

	err = json.Unmarshal(data, &varInstanceType)

	if err != nil {
		return err
	}

	*o = InstanceType(varInstanceType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cloud")
		delete(additionalProperties, "shade_instance_type")
		delete(additionalProperties, "cloud_instance_type")
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "hourly_price")
		delete(additionalProperties, "deployment_type")
		delete(additionalProperties, "availability")
		delete(additionalProperties, "boot_time")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceType struct {
	value *InstanceType
	isSet bool
}

func (v NullableInstanceType) Get() *InstanceType {
	return v.value
}

func (v *NullableInstanceType) Set(val *InstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceType(val *InstanceType) *NullableInstanceType {
	return &NullableInstanceType{value: val, isSet: true}
}

func (v NullableInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
