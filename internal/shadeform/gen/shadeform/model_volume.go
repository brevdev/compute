/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Volume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Volume{}

// Volume struct for Volume
type Volume struct {
	// The ID of the storage volume.
	Id    string `json:"id"`
	Cloud Cloud  `json:"cloud"`
	// The unique identifier of the storage volume issued by the underlying cloud provider.
	CloudAssignedId string `json:"cloud_assigned_id"`
	// Specifies the region.
	Region string `json:"region"`
	// The name of the storage volume.
	Name string `json:"name"`
	// Denotes whether the volume is fixed in size or elastically scaling.
	FixedSize bool `json:"fixed_size"`
	// Storage volume size in GB
	SizeInGb int32 `json:"size_in_gb"`
	// The cost incurred by the instance. This only the cost via Shadeform. If the instance is deployed in your own cloud account, then all billing is through your cloud provider.
	CostEstimate string `json:"cost_estimate"`
	// Denotes whether the volume supports multiple instances mounting to it at the same time.
	SupportsMultiMount bool `json:"supports_multi_mount"`
	// The ID of the instance that is currently mounting the volume.
	MountedBy            string `json:"mounted_by"`
	AdditionalProperties map[string]interface{}
}

type _Volume Volume

// NewVolume instantiates a new Volume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolume(id string, cloud Cloud, cloudAssignedId string, region string, name string, fixedSize bool, sizeInGb int32, costEstimate string, supportsMultiMount bool, mountedBy string) *Volume {
	this := Volume{}
	this.Id = id
	this.Cloud = cloud
	this.CloudAssignedId = cloudAssignedId
	this.Region = region
	this.Name = name
	this.FixedSize = fixedSize
	this.SizeInGb = sizeInGb
	this.CostEstimate = costEstimate
	this.SupportsMultiMount = supportsMultiMount
	this.MountedBy = mountedBy
	return &this
}

// NewVolumeWithDefaults instantiates a new Volume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeWithDefaults() *Volume {
	this := Volume{}
	return &this
}

// GetId returns the Id field value
func (o *Volume) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Volume) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Volume) SetId(v string) {
	o.Id = v
}

// GetCloud returns the Cloud field value
func (o *Volume) GetCloud() Cloud {
	if o == nil {
		var ret Cloud
		return ret
	}

	return o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value
// and a boolean to check if the value has been set.
func (o *Volume) GetCloudOk() (*Cloud, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cloud, true
}

// SetCloud sets field value
func (o *Volume) SetCloud(v Cloud) {
	o.Cloud = v
}

// GetCloudAssignedId returns the CloudAssignedId field value
func (o *Volume) GetCloudAssignedId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudAssignedId
}

// GetCloudAssignedIdOk returns a tuple with the CloudAssignedId field value
// and a boolean to check if the value has been set.
func (o *Volume) GetCloudAssignedIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudAssignedId, true
}

// SetCloudAssignedId sets field value
func (o *Volume) SetCloudAssignedId(v string) {
	o.CloudAssignedId = v
}

// GetRegion returns the Region field value
func (o *Volume) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *Volume) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *Volume) SetRegion(v string) {
	o.Region = v
}

// GetName returns the Name field value
func (o *Volume) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Volume) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Volume) SetName(v string) {
	o.Name = v
}

// GetFixedSize returns the FixedSize field value
func (o *Volume) GetFixedSize() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FixedSize
}

// GetFixedSizeOk returns a tuple with the FixedSize field value
// and a boolean to check if the value has been set.
func (o *Volume) GetFixedSizeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FixedSize, true
}

// SetFixedSize sets field value
func (o *Volume) SetFixedSize(v bool) {
	o.FixedSize = v
}

// GetSizeInGb returns the SizeInGb field value
func (o *Volume) GetSizeInGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SizeInGb
}

// GetSizeInGbOk returns a tuple with the SizeInGb field value
// and a boolean to check if the value has been set.
func (o *Volume) GetSizeInGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeInGb, true
}

// SetSizeInGb sets field value
func (o *Volume) SetSizeInGb(v int32) {
	o.SizeInGb = v
}

// GetCostEstimate returns the CostEstimate field value
func (o *Volume) GetCostEstimate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CostEstimate
}

// GetCostEstimateOk returns a tuple with the CostEstimate field value
// and a boolean to check if the value has been set.
func (o *Volume) GetCostEstimateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CostEstimate, true
}

// SetCostEstimate sets field value
func (o *Volume) SetCostEstimate(v string) {
	o.CostEstimate = v
}

// GetSupportsMultiMount returns the SupportsMultiMount field value
func (o *Volume) GetSupportsMultiMount() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportsMultiMount
}

// GetSupportsMultiMountOk returns a tuple with the SupportsMultiMount field value
// and a boolean to check if the value has been set.
func (o *Volume) GetSupportsMultiMountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportsMultiMount, true
}

// SetSupportsMultiMount sets field value
func (o *Volume) SetSupportsMultiMount(v bool) {
	o.SupportsMultiMount = v
}

// GetMountedBy returns the MountedBy field value
func (o *Volume) GetMountedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MountedBy
}

// GetMountedByOk returns a tuple with the MountedBy field value
// and a boolean to check if the value has been set.
func (o *Volume) GetMountedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MountedBy, true
}

// SetMountedBy sets field value
func (o *Volume) SetMountedBy(v string) {
	o.MountedBy = v
}

func (o Volume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Volume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["cloud"] = o.Cloud
	toSerialize["cloud_assigned_id"] = o.CloudAssignedId
	toSerialize["region"] = o.Region
	toSerialize["name"] = o.Name
	toSerialize["fixed_size"] = o.FixedSize
	toSerialize["size_in_gb"] = o.SizeInGb
	toSerialize["cost_estimate"] = o.CostEstimate
	toSerialize["supports_multi_mount"] = o.SupportsMultiMount
	toSerialize["mounted_by"] = o.MountedBy

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Volume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"cloud",
		"cloud_assigned_id",
		"region",
		"name",
		"fixed_size",
		"size_in_gb",
		"cost_estimate",
		"supports_multi_mount",
		"mounted_by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolume := _Volume{}

	err = json.Unmarshal(data, &varVolume)

	if err != nil {
		return err
	}

	*o = Volume(varVolume)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "cloud")
		delete(additionalProperties, "cloud_assigned_id")
		delete(additionalProperties, "region")
		delete(additionalProperties, "name")
		delete(additionalProperties, "fixed_size")
		delete(additionalProperties, "size_in_gb")
		delete(additionalProperties, "cost_estimate")
		delete(additionalProperties, "supports_multi_mount")
		delete(additionalProperties, "mounted_by")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVolume struct {
	value *Volume
	isSet bool
}

func (v NullableVolume) Get() *Volume {
	return v.value
}

func (v *NullableVolume) Set(val *Volume) {
	v.value = val
	v.isSet = true
}

func (v NullableVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolume(val *Volume) *NullableVolume {
	return &NullableVolume{value: val, isSet: true}
}

func (v NullableVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
