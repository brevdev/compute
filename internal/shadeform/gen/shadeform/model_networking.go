/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Networking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Networking{}

// Networking Network configuration including firewall rules
type Networking struct {
	// List of UFW (Uncomplicated Firewall) rules
	UfwRules             []UfwRule `json:"ufw_rules,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Networking Networking

// NewNetworking instantiates a new Networking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworking() *Networking {
	this := Networking{}
	return &this
}

// NewNetworkingWithDefaults instantiates a new Networking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkingWithDefaults() *Networking {
	this := Networking{}
	return &this
}

// GetUfwRules returns the UfwRules field value if set, zero value otherwise.
func (o *Networking) GetUfwRules() []UfwRule {
	if o == nil || IsNil(o.UfwRules) {
		var ret []UfwRule
		return ret
	}
	return o.UfwRules
}

// GetUfwRulesOk returns a tuple with the UfwRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Networking) GetUfwRulesOk() ([]UfwRule, bool) {
	if o == nil || IsNil(o.UfwRules) {
		return nil, false
	}
	return o.UfwRules, true
}

// HasUfwRules returns a boolean if a field has been set.
func (o *Networking) HasUfwRules() bool {
	if o != nil && !IsNil(o.UfwRules) {
		return true
	}

	return false
}

// SetUfwRules gets a reference to the given []UfwRule and assigns it to the UfwRules field.
func (o *Networking) SetUfwRules(v []UfwRule) {
	o.UfwRules = v
}

func (o Networking) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Networking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UfwRules) {
		toSerialize["ufw_rules"] = o.UfwRules
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Networking) UnmarshalJSON(data []byte) (err error) {
	varNetworking := _Networking{}

	err = json.Unmarshal(data, &varNetworking)

	if err != nil {
		return err
	}

	*o = Networking(varNetworking)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ufw_rules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworking struct {
	value *Networking
	isSet bool
}

func (v NullableNetworking) Get() *Networking {
	return v.value
}

func (v *NullableNetworking) Set(val *Networking) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworking) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworking(val *Networking) *NullableNetworking {
	return &NullableNetworking{value: val, isSet: true}
}

func (v NullableNetworking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
