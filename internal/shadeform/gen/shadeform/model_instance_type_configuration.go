/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceTypeConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceTypeConfiguration{}

// InstanceTypeConfiguration struct for InstanceTypeConfiguration
type InstanceTypeConfiguration struct {
	// The amount of memory for the instance in gigabytes. Note that this is not VRAM which is determined by GPU type and the number of GPUs.
	MemoryInGb int32 `json:"memory_in_gb"`
	// The amount of storage for the instance. If this storage is too low for the instance type, please email support@shadeform.ai as the storage may be adjustable.
	StorageInGb int32 `json:"storage_in_gb"`
	// The number of vCPUs for the instance.
	Vcpus int32 `json:"vcpus"`
	// The number of GPUs for the instance.
	NumGpus int32 `json:"num_gpus"`
	// The type of GPU for the instance.
	GpuType string `json:"gpu_type"`
	// The type of GPU interconnect.
	Interconnect string `json:"interconnect"`
	// If the instance has NVLink
	Nvlink *bool `json:"nvlink,omitempty"`
	// The video memory per GPU for the instance in gigabytes.
	VramPerGpuInGb int32 `json:"vram_per_gpu_in_gb"`
	// The list of available operating systems for the instance.
	OsOptions            []string `json:"os_options"`
	AdditionalProperties map[string]interface{}
}

type _InstanceTypeConfiguration InstanceTypeConfiguration

// NewInstanceTypeConfiguration instantiates a new InstanceTypeConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypeConfiguration(memoryInGb int32, storageInGb int32, vcpus int32, numGpus int32, gpuType string, interconnect string, vramPerGpuInGb int32, osOptions []string) *InstanceTypeConfiguration {
	this := InstanceTypeConfiguration{}
	this.MemoryInGb = memoryInGb
	this.StorageInGb = storageInGb
	this.Vcpus = vcpus
	this.NumGpus = numGpus
	this.GpuType = gpuType
	this.Interconnect = interconnect
	this.VramPerGpuInGb = vramPerGpuInGb
	this.OsOptions = osOptions
	return &this
}

// NewInstanceTypeConfigurationWithDefaults instantiates a new InstanceTypeConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeConfigurationWithDefaults() *InstanceTypeConfiguration {
	this := InstanceTypeConfiguration{}
	return &this
}

// GetMemoryInGb returns the MemoryInGb field value
func (o *InstanceTypeConfiguration) GetMemoryInGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MemoryInGb
}

// GetMemoryInGbOk returns a tuple with the MemoryInGb field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeConfiguration) GetMemoryInGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryInGb, true
}

// SetMemoryInGb sets field value
func (o *InstanceTypeConfiguration) SetMemoryInGb(v int32) {
	o.MemoryInGb = v
}

// GetStorageInGb returns the StorageInGb field value
func (o *InstanceTypeConfiguration) GetStorageInGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StorageInGb
}

// GetStorageInGbOk returns a tuple with the StorageInGb field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeConfiguration) GetStorageInGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageInGb, true
}

// SetStorageInGb sets field value
func (o *InstanceTypeConfiguration) SetStorageInGb(v int32) {
	o.StorageInGb = v
}

// GetVcpus returns the Vcpus field value
func (o *InstanceTypeConfiguration) GetVcpus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Vcpus
}

// GetVcpusOk returns a tuple with the Vcpus field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeConfiguration) GetVcpusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vcpus, true
}

// SetVcpus sets field value
func (o *InstanceTypeConfiguration) SetVcpus(v int32) {
	o.Vcpus = v
}

// GetNumGpus returns the NumGpus field value
func (o *InstanceTypeConfiguration) GetNumGpus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumGpus
}

// GetNumGpusOk returns a tuple with the NumGpus field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeConfiguration) GetNumGpusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumGpus, true
}

// SetNumGpus sets field value
func (o *InstanceTypeConfiguration) SetNumGpus(v int32) {
	o.NumGpus = v
}

// GetGpuType returns the GpuType field value
func (o *InstanceTypeConfiguration) GetGpuType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GpuType
}

// GetGpuTypeOk returns a tuple with the GpuType field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeConfiguration) GetGpuTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GpuType, true
}

// SetGpuType sets field value
func (o *InstanceTypeConfiguration) SetGpuType(v string) {
	o.GpuType = v
}

// GetInterconnect returns the Interconnect field value
func (o *InstanceTypeConfiguration) GetInterconnect() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interconnect
}

// GetInterconnectOk returns a tuple with the Interconnect field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeConfiguration) GetInterconnectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interconnect, true
}

// SetInterconnect sets field value
func (o *InstanceTypeConfiguration) SetInterconnect(v string) {
	o.Interconnect = v
}

// GetNvlink returns the Nvlink field value if set, zero value otherwise.
func (o *InstanceTypeConfiguration) GetNvlink() bool {
	if o == nil || IsNil(o.Nvlink) {
		var ret bool
		return ret
	}
	return *o.Nvlink
}

// GetNvlinkOk returns a tuple with the Nvlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceTypeConfiguration) GetNvlinkOk() (*bool, bool) {
	if o == nil || IsNil(o.Nvlink) {
		return nil, false
	}
	return o.Nvlink, true
}

// HasNvlink returns a boolean if a field has been set.
func (o *InstanceTypeConfiguration) HasNvlink() bool {
	if o != nil && !IsNil(o.Nvlink) {
		return true
	}

	return false
}

// SetNvlink gets a reference to the given bool and assigns it to the Nvlink field.
func (o *InstanceTypeConfiguration) SetNvlink(v bool) {
	o.Nvlink = &v
}

// GetVramPerGpuInGb returns the VramPerGpuInGb field value
func (o *InstanceTypeConfiguration) GetVramPerGpuInGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VramPerGpuInGb
}

// GetVramPerGpuInGbOk returns a tuple with the VramPerGpuInGb field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeConfiguration) GetVramPerGpuInGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VramPerGpuInGb, true
}

// SetVramPerGpuInGb sets field value
func (o *InstanceTypeConfiguration) SetVramPerGpuInGb(v int32) {
	o.VramPerGpuInGb = v
}

// GetOsOptions returns the OsOptions field value
func (o *InstanceTypeConfiguration) GetOsOptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OsOptions
}

// GetOsOptionsOk returns a tuple with the OsOptions field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeConfiguration) GetOsOptionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsOptions, true
}

// SetOsOptions sets field value
func (o *InstanceTypeConfiguration) SetOsOptions(v []string) {
	o.OsOptions = v
}

func (o InstanceTypeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceTypeConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["memory_in_gb"] = o.MemoryInGb
	toSerialize["storage_in_gb"] = o.StorageInGb
	toSerialize["vcpus"] = o.Vcpus
	toSerialize["num_gpus"] = o.NumGpus
	toSerialize["gpu_type"] = o.GpuType
	toSerialize["interconnect"] = o.Interconnect
	if !IsNil(o.Nvlink) {
		toSerialize["nvlink"] = o.Nvlink
	}
	toSerialize["vram_per_gpu_in_gb"] = o.VramPerGpuInGb
	toSerialize["os_options"] = o.OsOptions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceTypeConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"memory_in_gb",
		"storage_in_gb",
		"vcpus",
		"num_gpus",
		"gpu_type",
		"interconnect",
		"vram_per_gpu_in_gb",
		"os_options",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceTypeConfiguration := _InstanceTypeConfiguration{}

	err = json.Unmarshal(data, &varInstanceTypeConfiguration)

	if err != nil {
		return err
	}

	*o = InstanceTypeConfiguration(varInstanceTypeConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "memory_in_gb")
		delete(additionalProperties, "storage_in_gb")
		delete(additionalProperties, "vcpus")
		delete(additionalProperties, "num_gpus")
		delete(additionalProperties, "gpu_type")
		delete(additionalProperties, "interconnect")
		delete(additionalProperties, "nvlink")
		delete(additionalProperties, "vram_per_gpu_in_gb")
		delete(additionalProperties, "os_options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceTypeConfiguration struct {
	value *InstanceTypeConfiguration
	isSet bool
}

func (v NullableInstanceTypeConfiguration) Get() *InstanceTypeConfiguration {
	return v.value
}

func (v *NullableInstanceTypeConfiguration) Set(val *InstanceTypeConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypeConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypeConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypeConfiguration(val *InstanceTypeConfiguration) *NullableInstanceTypeConfiguration {
	return &NullableInstanceTypeConfiguration{value: val, isSet: true}
}

func (v NullableInstanceTypeConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypeConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
