/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DockerConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockerConfiguration{}

// DockerConfiguration May only be used if launch_configuration.type is 'docker'. Use docker_configuration to automatically pull and run a docker image. See this [tutorial](/guides/dockercontainers) for examples.
type DockerConfiguration struct {
	// Specifies the docker image to be pulled and run on the instance at startup.
	Image string `json:"image"`
	// Specifies the container arguments passed into the image at runtime.
	Args *string `json:"args,omitempty"`
	// Describes the amount of shared memory allocated for the container. Equivalent to using the --shm-size flag in the docker cli. If shared_memory_in_gb is not specified, then the container will use the host namespace which is the equivalent of --ipc=host.
	SharedMemoryInGb *int32 `json:"shared_memory_in_gb,omitempty"`
	// List of environment variable name-value pairs that will be passed to the docker container.
	Envs []Env `json:"envs,omitempty"`
	// List of port mappings between the host instance and the docker container. Equivalent of -p flag for docker run command.
	PortMappings []PortMappings `json:"port_mappings,omitempty"`
	// List of volume mounts between the host instance and the docker container. Equivalent of -v flag for docker run command.
	VolumeMounts         []VolumeMounts       `json:"volume_mounts,omitempty"`
	RegistryCredentials  *RegistryCredentials `json:"registry_credentials,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DockerConfiguration DockerConfiguration

// NewDockerConfiguration instantiates a new DockerConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerConfiguration(image string) *DockerConfiguration {
	this := DockerConfiguration{}
	this.Image = image
	return &this
}

// NewDockerConfigurationWithDefaults instantiates a new DockerConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerConfigurationWithDefaults() *DockerConfiguration {
	this := DockerConfiguration{}
	return &this
}

// GetImage returns the Image field value
func (o *DockerConfiguration) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *DockerConfiguration) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *DockerConfiguration) SetImage(v string) {
	o.Image = v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *DockerConfiguration) GetArgs() string {
	if o == nil || IsNil(o.Args) {
		var ret string
		return ret
	}
	return *o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerConfiguration) GetArgsOk() (*string, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *DockerConfiguration) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given string and assigns it to the Args field.
func (o *DockerConfiguration) SetArgs(v string) {
	o.Args = &v
}

// GetSharedMemoryInGb returns the SharedMemoryInGb field value if set, zero value otherwise.
func (o *DockerConfiguration) GetSharedMemoryInGb() int32 {
	if o == nil || IsNil(o.SharedMemoryInGb) {
		var ret int32
		return ret
	}
	return *o.SharedMemoryInGb
}

// GetSharedMemoryInGbOk returns a tuple with the SharedMemoryInGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerConfiguration) GetSharedMemoryInGbOk() (*int32, bool) {
	if o == nil || IsNil(o.SharedMemoryInGb) {
		return nil, false
	}
	return o.SharedMemoryInGb, true
}

// HasSharedMemoryInGb returns a boolean if a field has been set.
func (o *DockerConfiguration) HasSharedMemoryInGb() bool {
	if o != nil && !IsNil(o.SharedMemoryInGb) {
		return true
	}

	return false
}

// SetSharedMemoryInGb gets a reference to the given int32 and assigns it to the SharedMemoryInGb field.
func (o *DockerConfiguration) SetSharedMemoryInGb(v int32) {
	o.SharedMemoryInGb = &v
}

// GetEnvs returns the Envs field value if set, zero value otherwise.
func (o *DockerConfiguration) GetEnvs() []Env {
	if o == nil || IsNil(o.Envs) {
		var ret []Env
		return ret
	}
	return o.Envs
}

// GetEnvsOk returns a tuple with the Envs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerConfiguration) GetEnvsOk() ([]Env, bool) {
	if o == nil || IsNil(o.Envs) {
		return nil, false
	}
	return o.Envs, true
}

// HasEnvs returns a boolean if a field has been set.
func (o *DockerConfiguration) HasEnvs() bool {
	if o != nil && !IsNil(o.Envs) {
		return true
	}

	return false
}

// SetEnvs gets a reference to the given []Env and assigns it to the Envs field.
func (o *DockerConfiguration) SetEnvs(v []Env) {
	o.Envs = v
}

// GetPortMappings returns the PortMappings field value if set, zero value otherwise.
func (o *DockerConfiguration) GetPortMappings() []PortMappings {
	if o == nil || IsNil(o.PortMappings) {
		var ret []PortMappings
		return ret
	}
	return o.PortMappings
}

// GetPortMappingsOk returns a tuple with the PortMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerConfiguration) GetPortMappingsOk() ([]PortMappings, bool) {
	if o == nil || IsNil(o.PortMappings) {
		return nil, false
	}
	return o.PortMappings, true
}

// HasPortMappings returns a boolean if a field has been set.
func (o *DockerConfiguration) HasPortMappings() bool {
	if o != nil && !IsNil(o.PortMappings) {
		return true
	}

	return false
}

// SetPortMappings gets a reference to the given []PortMappings and assigns it to the PortMappings field.
func (o *DockerConfiguration) SetPortMappings(v []PortMappings) {
	o.PortMappings = v
}

// GetVolumeMounts returns the VolumeMounts field value if set, zero value otherwise.
func (o *DockerConfiguration) GetVolumeMounts() []VolumeMounts {
	if o == nil || IsNil(o.VolumeMounts) {
		var ret []VolumeMounts
		return ret
	}
	return o.VolumeMounts
}

// GetVolumeMountsOk returns a tuple with the VolumeMounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerConfiguration) GetVolumeMountsOk() ([]VolumeMounts, bool) {
	if o == nil || IsNil(o.VolumeMounts) {
		return nil, false
	}
	return o.VolumeMounts, true
}

// HasVolumeMounts returns a boolean if a field has been set.
func (o *DockerConfiguration) HasVolumeMounts() bool {
	if o != nil && !IsNil(o.VolumeMounts) {
		return true
	}

	return false
}

// SetVolumeMounts gets a reference to the given []VolumeMounts and assigns it to the VolumeMounts field.
func (o *DockerConfiguration) SetVolumeMounts(v []VolumeMounts) {
	o.VolumeMounts = v
}

// GetRegistryCredentials returns the RegistryCredentials field value if set, zero value otherwise.
func (o *DockerConfiguration) GetRegistryCredentials() RegistryCredentials {
	if o == nil || IsNil(o.RegistryCredentials) {
		var ret RegistryCredentials
		return ret
	}
	return *o.RegistryCredentials
}

// GetRegistryCredentialsOk returns a tuple with the RegistryCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerConfiguration) GetRegistryCredentialsOk() (*RegistryCredentials, bool) {
	if o == nil || IsNil(o.RegistryCredentials) {
		return nil, false
	}
	return o.RegistryCredentials, true
}

// HasRegistryCredentials returns a boolean if a field has been set.
func (o *DockerConfiguration) HasRegistryCredentials() bool {
	if o != nil && !IsNil(o.RegistryCredentials) {
		return true
	}

	return false
}

// SetRegistryCredentials gets a reference to the given RegistryCredentials and assigns it to the RegistryCredentials field.
func (o *DockerConfiguration) SetRegistryCredentials(v RegistryCredentials) {
	o.RegistryCredentials = &v
}

func (o DockerConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockerConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image"] = o.Image
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !IsNil(o.SharedMemoryInGb) {
		toSerialize["shared_memory_in_gb"] = o.SharedMemoryInGb
	}
	if !IsNil(o.Envs) {
		toSerialize["envs"] = o.Envs
	}
	if !IsNil(o.PortMappings) {
		toSerialize["port_mappings"] = o.PortMappings
	}
	if !IsNil(o.VolumeMounts) {
		toSerialize["volume_mounts"] = o.VolumeMounts
	}
	if !IsNil(o.RegistryCredentials) {
		toSerialize["registry_credentials"] = o.RegistryCredentials
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DockerConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDockerConfiguration := _DockerConfiguration{}

	err = json.Unmarshal(data, &varDockerConfiguration)

	if err != nil {
		return err
	}

	*o = DockerConfiguration(varDockerConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "image")
		delete(additionalProperties, "args")
		delete(additionalProperties, "shared_memory_in_gb")
		delete(additionalProperties, "envs")
		delete(additionalProperties, "port_mappings")
		delete(additionalProperties, "volume_mounts")
		delete(additionalProperties, "registry_credentials")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDockerConfiguration struct {
	value *DockerConfiguration
	isSet bool
}

func (v NullableDockerConfiguration) Get() *DockerConfiguration {
	return v.value
}

func (v *NullableDockerConfiguration) Set(val *DockerConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerConfiguration(val *DockerConfiguration) *NullableDockerConfiguration {
	return &NullableDockerConfiguration{value: val, isSet: true}
}

func (v NullableDockerConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
