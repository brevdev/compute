/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InstancesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstancesResponse{}

// InstancesResponse struct for InstancesResponse
type InstancesResponse struct {
	Instances            []Instance `json:"instances"`
	AdditionalProperties map[string]interface{}
}

type _InstancesResponse InstancesResponse

// NewInstancesResponse instantiates a new InstancesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstancesResponse(instances []Instance) *InstancesResponse {
	this := InstancesResponse{}
	this.Instances = instances
	return &this
}

// NewInstancesResponseWithDefaults instantiates a new InstancesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstancesResponseWithDefaults() *InstancesResponse {
	this := InstancesResponse{}
	return &this
}

// GetInstances returns the Instances field value
func (o *InstancesResponse) GetInstances() []Instance {
	if o == nil {
		var ret []Instance
		return ret
	}

	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value
// and a boolean to check if the value has been set.
func (o *InstancesResponse) GetInstancesOk() ([]Instance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instances, true
}

// SetInstances sets field value
func (o *InstancesResponse) SetInstances(v []Instance) {
	o.Instances = v
}

func (o InstancesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstancesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instances"] = o.Instances

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstancesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instances",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstancesResponse := _InstancesResponse{}

	err = json.Unmarshal(data, &varInstancesResponse)

	if err != nil {
		return err
	}

	*o = InstancesResponse(varInstancesResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instances")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstancesResponse struct {
	value *InstancesResponse
	isSet bool
}

func (v NullableInstancesResponse) Get() *InstancesResponse {
	return v.value
}

func (v *NullableInstancesResponse) Set(val *InstancesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInstancesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInstancesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstancesResponse(val *InstancesResponse) *NullableInstancesResponse {
	return &NullableInstancesResponse{value: val, isSet: true}
}

func (v NullableInstancesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstancesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
