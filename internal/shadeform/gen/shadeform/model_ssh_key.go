/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SshKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SshKey{}

// SshKey struct for SshKey
type SshKey struct {
	// The ID of the SSH Key.
	Id string `json:"id"`
	// The name of the SSH Key.
	Name string `json:"name"`
	// The public key.
	PublicKey string `json:"public_key"`
	// Indicates the default key.
	IsDefault            bool `json:"is_default"`
	AdditionalProperties map[string]interface{}
}

type _SshKey SshKey

// NewSshKey instantiates a new SshKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshKey(id string, name string, publicKey string, isDefault bool) *SshKey {
	this := SshKey{}
	this.Id = id
	this.Name = name
	this.PublicKey = publicKey
	this.IsDefault = isDefault
	return &this
}

// NewSshKeyWithDefaults instantiates a new SshKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshKeyWithDefaults() *SshKey {
	this := SshKey{}
	return &this
}

// GetId returns the Id field value
func (o *SshKey) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SshKey) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SshKey) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *SshKey) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SshKey) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SshKey) SetName(v string) {
	o.Name = v
}

// GetPublicKey returns the PublicKey field value
func (o *SshKey) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *SshKey) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *SshKey) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetIsDefault returns the IsDefault field value
func (o *SshKey) GetIsDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value
// and a boolean to check if the value has been set.
func (o *SshKey) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDefault, true
}

// SetIsDefault sets field value
func (o *SshKey) SetIsDefault(v bool) {
	o.IsDefault = v
}

func (o SshKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SshKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["public_key"] = o.PublicKey
	toSerialize["is_default"] = o.IsDefault

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SshKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"public_key",
		"is_default",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSshKey := _SshKey{}

	err = json.Unmarshal(data, &varSshKey)

	if err != nil {
		return err
	}

	*o = SshKey(varSshKey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "public_key")
		delete(additionalProperties, "is_default")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSshKey struct {
	value *SshKey
	isSet bool
}

func (v NullableSshKey) Get() *SshKey {
	return v.value
}

func (v *NullableSshKey) Set(val *SshKey) {
	v.value = val
	v.isSet = true
}

func (v NullableSshKey) IsSet() bool {
	return v.isSet
}

func (v *NullableSshKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshKey(val *SshKey) *NullableSshKey {
	return &NullableSshKey{value: val, isSet: true}
}

func (v NullableSshKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
