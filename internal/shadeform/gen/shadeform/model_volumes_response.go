/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the VolumesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumesResponse{}

// VolumesResponse struct for VolumesResponse
type VolumesResponse struct {
	Volumes              []Volume `json:"volumes"`
	AdditionalProperties map[string]interface{}
}

type _VolumesResponse VolumesResponse

// NewVolumesResponse instantiates a new VolumesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumesResponse(volumes []Volume) *VolumesResponse {
	this := VolumesResponse{}
	this.Volumes = volumes
	return &this
}

// NewVolumesResponseWithDefaults instantiates a new VolumesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumesResponseWithDefaults() *VolumesResponse {
	this := VolumesResponse{}
	return &this
}

// GetVolumes returns the Volumes field value
func (o *VolumesResponse) GetVolumes() []Volume {
	if o == nil {
		var ret []Volume
		return ret
	}

	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value
// and a boolean to check if the value has been set.
func (o *VolumesResponse) GetVolumesOk() ([]Volume, bool) {
	if o == nil {
		return nil, false
	}
	return o.Volumes, true
}

// SetVolumes sets field value
func (o *VolumesResponse) SetVolumes(v []Volume) {
	o.Volumes = v
}

func (o VolumesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["volumes"] = o.Volumes

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VolumesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"volumes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumesResponse := _VolumesResponse{}

	err = json.Unmarshal(data, &varVolumesResponse)

	if err != nil {
		return err
	}

	*o = VolumesResponse(varVolumesResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "volumes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVolumesResponse struct {
	value *VolumesResponse
	isSet bool
}

func (v NullableVolumesResponse) Get() *VolumesResponse {
	return v.value
}

func (v *NullableVolumesResponse) Set(val *VolumesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumesResponse(val *VolumesResponse) *NullableVolumesResponse {
	return &NullableVolumesResponse{value: val, isSet: true}
}

func (v NullableVolumesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
