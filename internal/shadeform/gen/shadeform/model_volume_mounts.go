/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the VolumeMounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeMounts{}

// VolumeMounts Mounts the host volume to a container file path.
type VolumeMounts struct {
	// Filepath of the host.
	HostPath string `json:"host_path"`
	// Filepath of the container.
	ContainerPath        string `json:"container_path"`
	AdditionalProperties map[string]interface{}
}

type _VolumeMounts VolumeMounts

// NewVolumeMounts instantiates a new VolumeMounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeMounts(hostPath string, containerPath string) *VolumeMounts {
	this := VolumeMounts{}
	this.HostPath = hostPath
	this.ContainerPath = containerPath
	return &this
}

// NewVolumeMountsWithDefaults instantiates a new VolumeMounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeMountsWithDefaults() *VolumeMounts {
	this := VolumeMounts{}
	return &this
}

// GetHostPath returns the HostPath field value
func (o *VolumeMounts) GetHostPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostPath
}

// GetHostPathOk returns a tuple with the HostPath field value
// and a boolean to check if the value has been set.
func (o *VolumeMounts) GetHostPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostPath, true
}

// SetHostPath sets field value
func (o *VolumeMounts) SetHostPath(v string) {
	o.HostPath = v
}

// GetContainerPath returns the ContainerPath field value
func (o *VolumeMounts) GetContainerPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerPath
}

// GetContainerPathOk returns a tuple with the ContainerPath field value
// and a boolean to check if the value has been set.
func (o *VolumeMounts) GetContainerPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerPath, true
}

// SetContainerPath sets field value
func (o *VolumeMounts) SetContainerPath(v string) {
	o.ContainerPath = v
}

func (o VolumeMounts) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeMounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host_path"] = o.HostPath
	toSerialize["container_path"] = o.ContainerPath

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VolumeMounts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host_path",
		"container_path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeMounts := _VolumeMounts{}

	err = json.Unmarshal(data, &varVolumeMounts)

	if err != nil {
		return err
	}

	*o = VolumeMounts(varVolumeMounts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "host_path")
		delete(additionalProperties, "container_path")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVolumeMounts struct {
	value *VolumeMounts
	isSet bool
}

func (v NullableVolumeMounts) Get() *VolumeMounts {
	return v.value
}

func (v *NullableVolumeMounts) Set(val *VolumeMounts) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeMounts) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeMounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeMounts(val *VolumeMounts) *NullableVolumeMounts {
	return &NullableVolumeMounts{value: val, isSet: true}
}

func (v NullableVolumeMounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeMounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
