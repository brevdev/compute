/*
Shadeform API

Shadeform is a single API and platform for deploying and managing cloud GPUs.

API version: 1.0.0
Contact: support@shadeform.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PortMappings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortMappings{}

// PortMappings Maps the public instance port to a port on the container.
type PortMappings struct {
	// Port of the host.
	HostPort int32 `json:"host_port"`
	// Port of the container.
	ContainerPort        int32 `json:"container_port"`
	AdditionalProperties map[string]interface{}
}

type _PortMappings PortMappings

// NewPortMappings instantiates a new PortMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortMappings(hostPort int32, containerPort int32) *PortMappings {
	this := PortMappings{}
	this.HostPort = hostPort
	this.ContainerPort = containerPort
	return &this
}

// NewPortMappingsWithDefaults instantiates a new PortMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortMappingsWithDefaults() *PortMappings {
	this := PortMappings{}
	return &this
}

// GetHostPort returns the HostPort field value
func (o *PortMappings) GetHostPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HostPort
}

// GetHostPortOk returns a tuple with the HostPort field value
// and a boolean to check if the value has been set.
func (o *PortMappings) GetHostPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostPort, true
}

// SetHostPort sets field value
func (o *PortMappings) SetHostPort(v int32) {
	o.HostPort = v
}

// GetContainerPort returns the ContainerPort field value
func (o *PortMappings) GetContainerPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ContainerPort
}

// GetContainerPortOk returns a tuple with the ContainerPort field value
// and a boolean to check if the value has been set.
func (o *PortMappings) GetContainerPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerPort, true
}

// SetContainerPort sets field value
func (o *PortMappings) SetContainerPort(v int32) {
	o.ContainerPort = v
}

func (o PortMappings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortMappings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host_port"] = o.HostPort
	toSerialize["container_port"] = o.ContainerPort

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortMappings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host_port",
		"container_port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPortMappings := _PortMappings{}

	err = json.Unmarshal(data, &varPortMappings)

	if err != nil {
		return err
	}

	*o = PortMappings(varPortMappings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "host_port")
		delete(additionalProperties, "container_port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortMappings struct {
	value *PortMappings
	isSet bool
}

func (v NullablePortMappings) Get() *PortMappings {
	return v.value
}

func (v *NullablePortMappings) Set(val *PortMappings) {
	v.value = val
	v.isSet = true
}

func (v NullablePortMappings) IsSet() bool {
	return v.isSet
}

func (v *NullablePortMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortMappings(val *PortMappings) *NullablePortMappings {
	return &NullablePortMappings{value: val, isSet: true}
}

func (v NullablePortMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
